<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Consul服务注册</title>
    <url>//Go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6/Consul%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">register:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">grpc.app.server</span> <span class="comment"># 服务名</span></span><br><span class="line">  <span class="attr">grpc_port:</span> <span class="number">8080</span> <span class="comment"># grpc端口，不可以为0</span></span><br><span class="line">  <span class="attr">http_port:</span> <span class="number">80</span> <span class="comment"># http端口，0表示不开启http</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8500</span> <span class="comment"># 注册中心地址</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3</span> <span class="comment"># 超时控制</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="comment"># 服务下的service</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">check:</span> <span class="comment"># 健康检查</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">5s</span> <span class="comment"># 超时</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">5s</span> <span class="comment"># 检查间隔</span></span><br><span class="line">    <span class="attr">deregister_critical_service_after:</span> <span class="string">10s</span> <span class="comment"># 检查失败后10s取消注册</span></span><br></pre></td></tr></table></figure>

<h1 id="GRPC-服务注册"><a href="#GRPC-服务注册" class="headerlink" title="GRPC 服务注册"></a>GRPC 服务注册</h1><h2 id="生成-GRPC-服务注册对象"><a href="#生成-GRPC-服务注册对象" class="headerlink" title="生成 GRPC 服务注册对象"></a>生成 GRPC 服务注册对象</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	registerClient *api.Client</span><br><span class="line">	serviceID      <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// serviceRegister 服务注册</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serviceRegister</span><span class="params">(cfg *configs.Config)</span></span> &#123;</span><br><span class="line">	rgsConfig := cfg.Register</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	serviceID = uuid.New().String()</span><br><span class="line">	defaultCfg := api.DefaultConfig()</span><br><span class="line">	defaultCfg.Address = rgsConfig.Addr</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> registerClient, err = api.NewClient(defaultCfg); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[serviceRegister] NewClient err = %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成注册对象</span></span><br><span class="line">	srvAddr := tools.GetOwnIP() + <span class="string">&quot;:&quot;</span> + rgsConfig.GrpcPort</span><br><span class="line">	port, _ := strconv.Atoi(rgsConfig.GrpcPort)</span><br><span class="line">	register := api.AgentServiceRegistration&#123;</span><br><span class="line">		ID:      serviceID,</span><br><span class="line">		Address: srvAddr,</span><br><span class="line">		Port:    port,</span><br><span class="line">		Name:    rgsConfig.Name,</span><br><span class="line">		Tags:    rgsConfig.Tags,</span><br><span class="line">		Check: &amp;api.AgentServiceCheck&#123; <span class="comment">// 健康检查对象</span></span><br><span class="line">			GRPC:                           srvAddr,</span><br><span class="line">			Timeout:                        rgsConfig.Check.Timeout,                        <span class="comment">// 超时</span></span><br><span class="line">			Interval:                       rgsConfig.Check.Interval,                       <span class="comment">// 检查间隔</span></span><br><span class="line">			DeregisterCriticalServiceAfter: rgsConfig.Check.DeregisterCriticalServiceAfter, <span class="comment">//注册失败10s后取消注册</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 开始注册</span></span><br><span class="line">	<span class="keyword">if</span> err := registerClient.Agent().ServiceRegister(&amp;register); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[ServiceRegister] 服务注册 err = %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="GRPC-需注册健康检测服务"><a href="#GRPC-需注册健康检测服务" class="headerlink" title="GRPC 需注册健康检测服务"></a>GRPC 需注册健康检测服务</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;google.golang.org/grpc/health&quot;</span></span><br><span class="line"><span class="comment">// &quot;google.golang.org/grpc/health/grpc_health_v1&quot;</span></span><br><span class="line">grpc_health_v1.RegisterHealthServer(server, health.NewServer())</span><br></pre></td></tr></table></figure>

<h1 id="HTTP-服务注册"><a href="#HTTP-服务注册" class="headerlink" title="HTTP 服务注册"></a>HTTP 服务注册</h1><h2 id="生成-HTTP-服务注册对象"><a href="#生成-HTTP-服务注册对象" class="headerlink" title="生成 HTTP 服务注册对象"></a>生成 HTTP 服务注册对象</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConsulRegister 服务注册</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConsulRegister</span><span class="params">()</span></span> &#123;</span><br><span class="line">	conn()</span><br><span class="line">	consulConfig := global.CONFIG.Consul</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成注册对象</span></span><br><span class="line">	register := <span class="built_in">new</span>(api.AgentServiceRegistration)</span><br><span class="line">	register.ID = serviceID</span><br><span class="line">	register.Address = utils.Ip</span><br><span class="line">	register.Port = utils.Port</span><br><span class="line">	register.Name = consulConfig.Name</span><br><span class="line">	register.Tags = consulConfig.Tags</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成对应的检查对象</span></span><br><span class="line">	register.Check = &amp;api.AgentServiceCheck&#123;</span><br><span class="line">		HTTP:                           <span class="string">&quot;http://&quot;</span> + utils.GetLocalIp() + <span class="string">&quot;:8080/health&quot;</span>,</span><br><span class="line">		Timeout:                        <span class="string">&quot;5s&quot;</span>,  <span class="comment">// 超时</span></span><br><span class="line">		Interval:                       <span class="string">&quot;5s&quot;</span>,  <span class="comment">// 检查间隔</span></span><br><span class="line">		DeregisterCriticalServiceAfter: <span class="string">&quot;10s&quot;</span>, <span class="comment">//注册失败10s后取消注册</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 开始注册</span></span><br><span class="line">	err := consulClient.Agent().ServiceRegister(register)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;服务注册失败 %s&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HTTP-需注册-x2F-health-进行响应"><a href="#HTTP-需注册-x2F-health-进行响应" class="headerlink" title="HTTP 需注册 &#x2F;health 进行响应"></a>HTTP 需注册 &#x2F;health 进行响应</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/health&quot;</span>, response.Ok)</span><br></pre></td></tr></table></figure>

<h1 id="consul-其他方法"><a href="#consul-其他方法" class="headerlink" title="consul 其他方法"></a>consul 其他方法</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// serviceDeregister 服务注销</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serviceDeregister</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> registerClient == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := registerClient.Agent().ServiceDeregister(serviceID); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[ServiceDeregister] 服务注销 err = %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Services 全部服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Services</span><span class="params">()</span></span> (<span class="keyword">map</span>[<span class="type">string</span>]*api.AgentService, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> registerClient.Agent().Services()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServicesWithFilter 服务过滤</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServicesWithFilter</span><span class="params">(serviceName <span class="type">string</span>)</span></span> (<span class="keyword">map</span>[<span class="type">string</span>]*api.AgentService, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> registerClient.Agent().ServicesWithFilter(<span class="string">&quot;Service == &quot;</span> + serviceName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceTarget 服务地址</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServiceTarget</span><span class="params">(cfg *configs.Config, serviceName <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;consul://&quot;</span> + cfg.Register.Addr + <span class="string">&quot;/&quot;</span> + serviceName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go微服务组件</category>
      </categories>
  </entry>
  <entry>
    <title>Elastic数据库驱动</title>
    <url>//Go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6/Elastic%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">elastic:</span></span><br><span class="line">  <span class="attr">addresses:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://localhost:9200</span></span><br><span class="line">  <span class="attr">username:</span></span><br><span class="line">  <span class="attr">password:</span></span><br></pre></td></tr></table></figure>

<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// elasticsearch7 &quot;github.com/elastic/go-elasticsearch/v7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES es7客户端</span></span><br><span class="line"><span class="keyword">var</span> ES *elasticsearch7.Client</span><br><span class="line"></span><br><span class="line"><span class="comment">// initES 初始化es</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initES</span><span class="params">(cfg *configs.Config)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> wg.Done()</span><br><span class="line">	<span class="keyword">if</span> cfg == <span class="literal">nil</span> || <span class="built_in">len</span>(cfg.Elastic.Addresses) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	<span class="keyword">if</span> ES, err = elasticsearch7.NewClient(elasticsearch7.Config&#123;</span><br><span class="line">		Addresses: cfg.Elastic.Addresses,</span><br><span class="line">		Username:  cfg.Elastic.Username,</span><br><span class="line">		Password:  cfg.Elastic.Password,</span><br><span class="line">	&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[initES] err = %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Go微服务组件</category>
      </categories>
  </entry>
  <entry>
    <title>GoRedis数据库驱动</title>
    <url>//Go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6/GoRedis%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">db:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6379</span></span><br><span class="line">  <span class="attr">password:</span></span><br></pre></td></tr></table></figure>

<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RDB redis驱动</span></span><br><span class="line"><span class="keyword">var</span> RDB *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="comment">// initRedis 初始化redis</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initRedis</span><span class="params">(cfg *configs.Config)</span></span> &#123;</span><br><span class="line">	RDB = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">		Addr:     cfg.Redis.Addr,</span><br><span class="line">		Password: cfg.Redis.Password,</span><br><span class="line">		DB:       cfg.Redis.DB,</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := RDB.Ping(context.Background()).Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[initRedis] err = %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Go微服务组件</category>
      </categories>
  </entry>
  <entry>
    <title>Golang基础笔记(上)</title>
    <url>//Golang/Golang%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0(%E4%B8%8A)/</url>
    <content><![CDATA[<h1 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://studygolang.com/dl">https://studygolang.com/dl</a></p>
<h2 id="选择合适平台后安装，后验证是否安装完成"><a href="#选择合适平台后安装，后验证是否安装完成" class="headerlink" title="选择合适平台后安装，后验证是否安装完成"></a>选择合适平台后安装，后验证是否安装完成</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="设置-go-module-为开启状态"><a href="#设置-go-module-为开启状态" class="headerlink" title="设置 go module 为开启状态"></a>设置 go module 为开启状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure>

<h2 id="设置-go-package-国内镜像地址"><a href="#设置-go-package-国内镜像地址" class="headerlink" title="设置 go package 国内镜像地址"></a>设置 go package 国内镜像地址</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>

<h1 id="二、变量定义"><a href="#二、变量定义" class="headerlink" title="二、变量定义"></a>二、变量定义</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正常定义（自动类型推断）</span></span><br><span class="line"><span class="keyword">var</span> aa = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> bb = <span class="string">&quot;kan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简略定义（自动类型推断）</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    cc = <span class="number">2</span></span><br><span class="line">    dd = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整定义</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">string</span> = <span class="string">&quot;ha&quot;</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩写定义（只能函数内）</span></span><br><span class="line">g := <span class="literal">true</span></span><br><span class="line">h := <span class="string">&quot;ha&quot;</span></span><br><span class="line">i := <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合定义</span></span><br><span class="line"><span class="keyword">var</span> j,k,l = <span class="literal">true</span>,<span class="number">123</span>,<span class="string">&quot;xi&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="打印相关-fmt-Printf"><a href="#打印相关-fmt-Printf" class="headerlink" title="打印相关 fmt.Printf"></a>打印相关 fmt.Printf</h2><table>
<thead>
<tr>
<th>code</th>
<th>desc</th>
</tr>
</thead>
<tbody><tr>
<td>%v</td>
<td>原样输出</td>
</tr>
<tr>
<td>%T</td>
<td>打印类型</td>
</tr>
<tr>
<td>%t</td>
<td>bool类型</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td>%f</td>
<td>浮点</td>
</tr>
<tr>
<td>%d</td>
<td>10进制的整数</td>
</tr>
<tr>
<td>%b</td>
<td>2进制的整数</td>
</tr>
<tr>
<td>%o</td>
<td>8进制</td>
</tr>
<tr>
<td>%x、%X</td>
<td>16进制</td>
</tr>
<tr>
<td>%x</td>
<td>0-9，a-f</td>
</tr>
<tr>
<td>%X</td>
<td>0-9，A-F</td>
</tr>
<tr>
<td>%c</td>
<td>打印字符</td>
</tr>
<tr>
<td>%p</td>
<td>打印地址</td>
</tr>
</tbody></table>
<h1 id="三、内置变量类型"><a href="#三、内置变量类型" class="headerlink" title="三、内置变量类型"></a>三、内置变量类型</h1><h2 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h2><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h2 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h2><table>
<thead>
<tr>
<th>type</th>
<th>desc</th>
</tr>
</thead>
<tbody><tr>
<td>(u)int</td>
<td>(无符号)不规定长度，在32位系统就32位，64位系统就64位</td>
</tr>
<tr>
<td>(u)int8</td>
<td>(无符号)规定长度8</td>
</tr>
<tr>
<td>(u)int16</td>
<td>(无符号)规定长度16</td>
</tr>
<tr>
<td>(u)int32</td>
<td>(无符号)规定长度32</td>
</tr>
<tr>
<td>(u)int64</td>
<td>(无符号)规定长度64</td>
</tr>
<tr>
<td>unitptr</td>
<td>指针，长度跟操作系统相关</td>
</tr>
</tbody></table>
<h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><table>
<thead>
<tr>
<th>type</th>
<th>desc</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>长度8位（8bit）</td>
</tr>
<tr>
<td>rune</td>
<td>长度32位</td>
</tr>
<tr>
<td><em>ps: rune 相当于 go 的 char</em></td>
<td></td>
</tr>
</tbody></table>
<h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table>
<thead>
<tr>
<th>type</th>
<th>desc</th>
</tr>
</thead>
<tbody><tr>
<td>float32</td>
<td></td>
</tr>
<tr>
<td>float64</td>
<td></td>
</tr>
<tr>
<td>complex64</td>
<td>64位的复数</td>
</tr>
<tr>
<td>complex128</td>
<td>128位的复数</td>
</tr>
</tbody></table>
<h1 id="四、常量与枚举"><a href="#四、常量与枚举" class="headerlink" title="四、常量与枚举"></a>四、常量与枚举</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常量定义</span></span><br><span class="line"><span class="keyword">const</span> a <span class="type">int</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">const</span> b,c = <span class="string">&quot;str&quot;</span>,<span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	d <span class="type">int</span> = <span class="number">1</span></span><br><span class="line">	e <span class="type">string</span> = <span class="string">&quot;xi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// const 数值可作为各种类型使用</span></span><br><span class="line"><span class="keyword">const</span> f,g = <span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> h <span class="type">int</span> = <span class="type">int</span>(math.Sqrt(f*f + g*g))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	aa = <span class="number">0</span></span><br><span class="line">	bb = <span class="number">1</span></span><br><span class="line">	cc = <span class="number">2</span></span><br><span class="line">	dd = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型 iota</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	a1 = <span class="literal">iota</span></span><br><span class="line">	b1</span><br><span class="line">	c1</span><br><span class="line">	d1</span><br><span class="line">)</span><br><span class="line"><span class="comment">// iota 后面的值都会自增1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型iota中间跳过定义</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	a2 = <span class="literal">iota</span></span><br><span class="line">	_</span><br><span class="line">	c2</span><br><span class="line">	d2</span><br><span class="line">)</span><br><span class="line">fmt.Println(a2,c2,d2) <span class="comment">// 0 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// iota 还可以参与运算</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	ap = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">	bp</span><br><span class="line">	cp</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="五、条件语句"><a href="#五、条件语句" class="headerlink" title="五、条件语句"></a>五、条件语句</h1><h2 id="完整版switch"><a href="#完整版switch" class="headerlink" title="完整版switch"></a>完整版switch</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a,b <span class="type">int</span>,op <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> op &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        result = a + b</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">        result = a - b</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">        result = a * b</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">        result = a / b</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;错误运算符&quot;</span> + op)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="简洁版switch"><a href="#简洁版switch" class="headerlink" title="简洁版switch"></a>简洁版switch</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">grade</span> <span class="params">(score <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    g := <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span> :</span><br><span class="line">        <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;分数错了&quot;</span>)) <span class="comment">// panic 用与手动抛出错误</span></span><br><span class="line">    <span class="keyword">case</span> score &lt; <span class="number">60</span>:</span><br><span class="line">        g = <span class="string">&quot;f&quot;</span></span><br><span class="line">    <span class="keyword">case</span> score &lt; <span class="number">80</span>:</span><br><span class="line">        g = <span class="string">&quot;c&quot;</span></span><br><span class="line">    <span class="keyword">case</span> score &lt; <span class="number">90</span>:</span><br><span class="line">        g = <span class="string">&quot;b&quot;</span></span><br><span class="line">    <span class="keyword">case</span> score &lt;= <span class="number">100</span>:</span><br><span class="line">        g = <span class="string">&quot;a&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="switch-的-fallthrough-语句"><a href="#switch-的-fallthrough-语句" class="headerlink" title="switch 的 fallthrough 语句"></a>switch 的 fallthrough 语句</h2><p><strong>Go里面switch默认相当于每个case最后带有break，匹配成功后不会自动向下执行其他case，而是跳出整个switch, 但是可以使用fallthrough强制执行后面的case代码</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> <span class="string">&quot;a&quot;</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;a&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;b&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;b&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;c&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">filename := <span class="string">&quot;a.txt&quot;</span></span><br><span class="line">contents, err := ioutil.ReadFile(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常条件语句</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s\n&quot;</span>,contents)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先执行一条语句，再进行判断</span></span><br><span class="line"><span class="keyword">if</span> contents1, err1 := ioutil.ReadFile(filename); err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err1)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s\n&quot;</span>,contents1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>,contents1) <span class="comment">// 报错！ if语句里面定义的contents1、err1，出了这个块就访问不到了</span></span><br></pre></td></tr></table></figure>

<h1 id="六、循环"><a href="#六、循环" class="headerlink" title="六、循环"></a>六、循环</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般 for 循环</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line">	sum += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略起始条件</span></span><br><span class="line">n := <span class="number">8</span> <span class="comment">//将8转二进制</span></span><br><span class="line">result := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> ; n &gt; <span class="number">0</span>; n /= <span class="number">2</span> &#123;</span><br><span class="line">	temp := n % <span class="number">2</span></span><br><span class="line">	result = strconv.Itoa(temp) + result</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有结束条件</span></span><br><span class="line">file, err := os.Open(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">scanner := bufio.NewScanner(file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">	fmt.Println(scanner.Text()) <span class="comment">// 将文本里面内容一行行打印出来</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 死循环</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、函数"><a href="#七、函数" class="headerlink" title="七、函数"></a>七、函数</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个返回值函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testfn1</span><span class="params">(a <span class="type">int</span>,b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个返回值函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testfn2</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span>(c <span class="type">int</span>, d <span class="type">string</span>) &#123;</span><br><span class="line">    c = a + b</span><br><span class="line">    d = <span class="string">&quot;haha&quot;</span></span><br><span class="line">    <span class="keyword">return</span> c,d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可简写成</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testfn3</span> <span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b, <span class="string">&quot;haha&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以新增报错参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testfn4</span> <span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> (<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> b &gt; <span class="number">4</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>,fmt.Errorf(<span class="string">&quot;错了%d&quot;</span>,b)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数可以作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testfn5</span><span class="params">(op <span class="keyword">func</span> (<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>, a, b <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    p := reflect.ValueOf(op).Pointer()</span><br><span class="line">    opName := runtime.FuncForPC(p).Name() <span class="comment">// 获取到函数名字</span></span><br><span class="line">    fmt.Println(opName) <span class="comment">// main.main.func1 包名.入口函数名.函数名</span></span><br><span class="line">    <span class="keyword">return</span> op(a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的可变参数列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(numbers ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    s := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> numbers &#123;</span><br><span class="line">        s += numbers[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、指针"><a href="#八、指针" class="headerlink" title="八、指针"></a>八、指针</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指针 (两个值交换)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a, b *<span class="type">int</span>)</span></span> &#123; <span class="comment">// *int表示这两个整型是指针地址</span></span><br><span class="line">    *b, *a = *a, *b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通的两数值交换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">normalSwap</span><span class="params">(c,d <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> d,c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// go里面只有值传递，没有引用传递，但是用指针可以实现引用传递的效果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指针 (两个值交换)</span></span><br><span class="line">    a := <span class="number">1</span></span><br><span class="line">    b := <span class="number">2</span></span><br><span class="line">    swap(&amp;a, &amp;b) <span class="comment">// 将a,b的指针地址传入</span></span><br><span class="line">    fmt.Println(a,b) <span class="comment">// 2 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通的两个值交换</span></span><br><span class="line">    c := <span class="number">1</span></span><br><span class="line">    d := <span class="number">2</span></span><br><span class="line">    c,d = normalSwap(c,d)</span><br><span class="line">    fmt.Println(c,d) <span class="comment">// 2 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="九、数组"><a href="#九、数组" class="headerlink" title="九、数组"></a>九、数组</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组作为参数传递，长度一定要达到要求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">acceptArr</span><span class="params">(a [5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;测试数组长度要求&quot;</span>,a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// go 是值传递，函数里改变数组并不影响原来的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeArr</span><span class="params">(a [5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">999</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针方式改变数组的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeArr1</span><span class="params">(a *[5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">999</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一维数组</span></span><br><span class="line">    <span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="type">int</span> <span class="comment">// int类型的数组，长度为5</span></span><br><span class="line">    arr2 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment">// int类型数组，长度为3，值为1，2，3</span></span><br><span class="line">    arr3 := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125; <span class="comment">// int类型数组，长度不固定，值为....</span></span><br><span class="line">    fmt.Println(arr1)</span><br><span class="line">    fmt.Println(arr2)</span><br><span class="line">    fmt.Println(arr3)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二维数组</span></span><br><span class="line">    <span class="keyword">var</span> grid [<span class="number">2</span>][<span class="number">3</span>]<span class="type">bool</span> <span class="comment">// bool类型数组，2维数组，每个数组有3个元素</span></span><br><span class="line">    fmt.Println(grid)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常数组遍历</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr3); i++ &#123;</span><br><span class="line">        fmt.Println(arr3[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// range 方法遍历</span></span><br><span class="line">    <span class="keyword">for</span> i,v := <span class="keyword">range</span> arr2 &#123; <span class="comment">// i是index，v是value</span></span><br><span class="line">        fmt.Println(i,v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// range 方法遍历（省略index）</span></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> arr2 &#123;</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    acceptArr(arr3) <span class="comment">// 正常</span></span><br><span class="line">    <span class="comment">//acceptArr(arr2) // 错误，长度达不到要求</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试改变数组值</span></span><br><span class="line">    changeArr(arr3)</span><br><span class="line">    fmt.Println(<span class="string">&quot;尝试改变数组值&quot;</span>,arr3) <span class="comment">// 失败</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指针方式改变数组</span></span><br><span class="line">    changeArr1(&amp;arr3)</span><br><span class="line">    fmt.Println(<span class="string">&quot;尝试改变数组值&quot;</span>,arr3) <span class="comment">// 成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十、切片"><a href="#十、切片" class="headerlink" title="十、切片"></a>十、切片</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过slice，更新array</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateSlice</span><span class="params">(a []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">333</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Slice(切片)：本身没有数据，是对底层array的一个view。 []里面带有: 的都是切片</span></span><br><span class="line">    arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从arr下标1开始，往后取到下标4</span></span><br><span class="line">    arr1 := arr[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">    fmt.Println(arr1) <span class="comment">// [1,2,3,4]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从头开始取到下标为5</span></span><br><span class="line">    arr2 := arr[:<span class="number">6</span>]</span><br><span class="line">    fmt.Println(arr2) <span class="comment">// [0 1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从下标3开始，取到最后</span></span><br><span class="line">    arr3 := arr[<span class="number">3</span>:]</span><br><span class="line">    fmt.Println(arr3) <span class="comment">// [3,4,5,6,7]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印出整个数组的view</span></span><br><span class="line">    arr4 := arr[:]</span><br><span class="line">    fmt.Println(arr4)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 slice 里面再取 slice</span></span><br><span class="line">    arr5 := arr[<span class="number">2</span>:<span class="number">5</span>] <span class="comment">// [2,3,4]</span></span><br><span class="line">    arr6 := arr5[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">// [3,4]</span></span><br><span class="line">    fmt.Println(arr6)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// slice本身没有数据，改变slice会改变原来的array</span></span><br><span class="line">    updateSlice(arr6)</span><br><span class="line">    fmt.Println(arr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reslice ：即对slice的重复赋值</span></span><br><span class="line">    s := arr[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">    s = s[:<span class="number">3</span>]</span><br><span class="line">    s = s[<span class="number">1</span>:]</span><br><span class="line">    s = arr[:]</span><br><span class="line">    fmt.Println(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// slice 扩展：从slice里面再取slice，要是下标超出就看cap，只要没超过capacity就正常</span></span><br><span class="line">    arr7 := arr6[<span class="number">0</span>:<span class="number">5</span>] <span class="comment">// [3,4,5,6,7]</span></span><br><span class="line">    fmt.Println(arr7)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容量（capacity）：是指slice的起始下标，到原array的结束位置</span></span><br><span class="line">    arr = [...]<span class="type">int</span>&#123;<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;原数组：&quot;</span>,arr,<span class="string">&quot;capacity:&quot;</span>,<span class="built_in">cap</span>(arr)) <span class="comment">// 原数组： [7 6 5 4 3 2 1 0] capacity: 8</span></span><br><span class="line"></span><br><span class="line">    s1 := arr[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line">    fmt.Println(<span class="string">&quot;原数组：&quot;</span>,s1,<span class="string">&quot;capacity:&quot;</span>,<span class="built_in">cap</span>(s1)) <span class="comment">// 原数组： [3 2 1 0] capacity: 4</span></span><br><span class="line"></span><br><span class="line">    s2 := s1[<span class="number">2</span>:]</span><br><span class="line">    fmt.Println(<span class="string">&quot;原数组：&quot;</span>,s2,<span class="string">&quot;capacity:&quot;</span>,<span class="built_in">cap</span>(s2)) <span class="comment">// 原数组： [1 0] capacity: 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十一、切片操作"><a href="#十一、切片操作" class="headerlink" title="十一、切片操作"></a>十一、切片操作</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// slice 添加元素</span></span><br><span class="line">arr := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为arr定义时已经固定好 length 跟 capacity，所以添加元素只能另起一个数组</span></span><br><span class="line">arr1 := <span class="built_in">append</span>(arr[:],<span class="number">4</span>) <span class="comment">// 第一个参数是slice，第二个是新增元素</span></span><br><span class="line">arr2 := <span class="built_in">append</span>(arr1,<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 必须接收 append 的返回值</span></span><br><span class="line">fmt.Println(arr1)</span><br><span class="line">fmt.Println(arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单实例</span></span><br><span class="line"><span class="keyword">var</span> s []<span class="type">int</span> <span class="comment">// 初始化一个slice，此时 s == nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line">	s = <span class="built_in">append</span>(s, <span class="number">2</span>*i+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单创建 slice</span></span><br><span class="line">s1 := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// make 方法创建 slice</span></span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">10</span>) <span class="comment">//新建slice，长度10，容量默认等于长度</span></span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">10</span>,<span class="number">32</span>) <span class="comment">//新建slice，长度10，容量32</span></span><br><span class="line">fmt.Println(<span class="string">&quot;元素：&quot;</span>,s2,<span class="string">&quot;长度：&quot;</span>,<span class="built_in">len</span>(s2),<span class="string">&quot;容量：&quot;</span>,<span class="built_in">cap</span>(s2))</span><br><span class="line">fmt.Println(<span class="string">&quot;元素：&quot;</span>,s3,<span class="string">&quot;长度：&quot;</span>,<span class="built_in">len</span>(s3),<span class="string">&quot;容量：&quot;</span>,<span class="built_in">cap</span>(s3))</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy 方法复制 slice</span></span><br><span class="line"><span class="built_in">copy</span>(s2,s1) <span class="comment">// 将s1 复制到 s2里面去</span></span><br><span class="line">fmt.Println(s2) <span class="comment">// [1 2 3 0 0 0 0 0 0 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 slice 里面的元素（如将2删掉）</span></span><br><span class="line">s2 = <span class="built_in">append</span>(s2[:<span class="number">1</span>],s2[<span class="number">2</span>:]...)</span><br><span class="line">fmt.Println(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除头部</span></span><br><span class="line">s2 = s2[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除尾部</span></span><br><span class="line">s2 = s2[:<span class="built_in">len</span>(s2)<span class="number">-1</span>]</span><br><span class="line">fmt.Println(s2)</span><br></pre></td></tr></table></figure>

<h1 id="十二、Map"><a href="#十二、Map" class="headerlink" title="十二、Map"></a>十二、Map</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接定义 map</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> &#123;</span><br><span class="line">	<span class="string">&quot;age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">	<span class="string">&quot;name&quot;</span>:<span class="number">11</span>,</span><br><span class="line">	<span class="string">&quot;otherName&quot;</span>:<span class="number">12</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m)</span><br><span class="line"></span><br><span class="line"><span class="comment">// make 定义 map</span></span><br><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>) <span class="comment">// m1 == empty map</span></span><br><span class="line">fmt.Println(m1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// var 定义 map</span></span><br><span class="line"><span class="keyword">var</span> m2 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> <span class="comment">// m2 == nil</span></span><br><span class="line">fmt.Println(m2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 map (不保证顺序)</span></span><br><span class="line"><span class="keyword">for</span> i,v := <span class="keyword">range</span> m &#123;</span><br><span class="line">	fmt.Println(i,v) <span class="comment">// i是key，v是value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取map里面键值</span></span><br><span class="line">fmt.Println(m[<span class="string">&quot;age&quot;</span>])</span><br><span class="line">fmt.Println(m[<span class="string">&quot;ages&quot;</span>]) <span class="comment">// 若key不存在就会返回默认初始值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断map里面key存不存在</span></span><br><span class="line"><span class="keyword">if</span> value,ok := m[<span class="string">&quot;age&quot;</span>];ok &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;存在，值为：&quot;</span>,value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除map里面的key</span></span><br><span class="line"><span class="built_in">delete</span>(m,<span class="string">&quot;age&quot;</span>)</span><br><span class="line">fmt.Println(m)</span><br></pre></td></tr></table></figure>

<h1 id="十三、结构体和方法"><a href="#十三、结构体和方法" class="headerlink" title="十三、结构体和方法"></a>十三、结构体和方法</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建结构体类型</span></span><br><span class="line"><span class="keyword">type</span> treeType <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">    address <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给结构体新增方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node treeType)</span></span> echoName() &#123; <span class="comment">// 前面括号表示为哪个结构体的方法；后面echoName为方法名称</span></span><br><span class="line">    <span class="built_in">println</span>(node.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有使用指针才能改变结构内容。（调用时正常调用，不用传&amp;）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *treeType)</span></span> setAge(value <span class="type">int</span>) &#123;</span><br><span class="line">    node.age = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 结构体</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// key-value方式，创建新的实例</span></span><br><span class="line">    newStruct := treeType&#123;name:<span class="string">&quot;张三&quot;</span>,age:<span class="number">18</span>,address: <span class="string">&quot;北京&quot;</span>&#125; <span class="comment">// 可以省略任意值，忽略的值为0或空</span></span><br><span class="line">    fmt.Println(newStruct)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接赋值方式，创建新的实例</span></span><br><span class="line">    newStruct1 := treeType&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">88</span>,<span class="string">&quot;广州&quot;</span>&#125; <span class="comment">// 这方式不能省略任意一个值</span></span><br><span class="line">    fmt.Println(newStruct1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 . 符号，创建新的实例</span></span><br><span class="line">    <span class="keyword">var</span> hongTree treeType</span><br><span class="line">    hongTree.name = <span class="string">&quot;红树&quot;</span></span><br><span class="line">    hongTree.age = <span class="number">100</span></span><br><span class="line">    hongTree.address = <span class="string">&quot;云南&quot;</span></span><br><span class="line">    fmt.Println(hongTree)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 . 符号，访问结构体成员信息</span></span><br><span class="line">    fmt.Println(hongTree.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构体可作为函数参数（略）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构体指针</span></span><br><span class="line">    <span class="keyword">var</span> redTree treeType</span><br><span class="line">    redTree.age = <span class="number">1</span></span><br><span class="line">    redTree.name = <span class="string">&quot;red指针&quot;</span></span><br><span class="line">    redTree.address = <span class="string">&quot;河南&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传递指针参数</span></span><br><span class="line">    <span class="built_in">print</span>(&amp;redTree)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当然 slice 的类型也可以用 刚定义的类型</span></span><br><span class="line">    oslice := []treeType  &#123;</span><br><span class="line">        &#123;age:<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;王五&quot;</span>,<span class="number">3</span>,<span class="string">&quot;西藏&quot;</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(oslice)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用结构体的方法</span></span><br><span class="line">    redTree.echoName() <span class="comment">// 异步操作</span></span><br><span class="line">    redTree.setAge(<span class="number">999</span>)</span><br><span class="line">    fmt.Println(redTree.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收指针参数，进行打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span> <span class="params">(arg *treeType)</span></span> &#123;</span><br><span class="line">    fmt.Println(arg.address)</span><br><span class="line">    fmt.Println(arg.age)</span><br><span class="line">    fmt.Println(arg.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(v <span class="type">int</span>)</span></span> *treeType &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;treeType&#123;age: v&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回局部变量地址可以正常使用</span></span><br></pre></td></tr></table></figure>

<h1 id="十四、包和封装"><a href="#十四、包和封装" class="headerlink" title="十四、包和封装"></a>十四、包和封装</h1><p><strong>前置命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir learngo &amp;&amp; cd learngo &amp;&amp; touch main.go</span><br><span class="line">go mod init learngo</span><br></pre></td></tr></table></figure>

<h2 id="main-go-下调用-op-文件夹里面的数据"><a href="#main-go-下调用-op-文件夹里面的数据" class="headerlink" title="main.go 下调用 op 文件夹里面的数据"></a>main.go 下调用 op 文件夹里面的数据</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;learngo/op&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(op.Add(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="op-x2F-op-go-内容为"><a href="#op-x2F-op-go-内容为" class="headerlink" title="op&#x2F;op.go 内容为"></a>op&#x2F;op.go 内容为</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> op</span><br><span class="line"><span class="comment">// 目录名可以和包名不一样</span></span><br><span class="line"><span class="comment">// 一个目录一个包。main包，包含可执行入口（main函数）</span></span><br><span class="line"><span class="comment">// 为结构定义的方法必须放在同一个包内，但可以是不同文件</span></span><br><span class="line"><span class="comment">// 名字一般使用CamelCase</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public 方法，首字母大写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a,b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// private 方法，首字母小写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">(a,b <span class="type">int</span>)</span></span> <span class="type">int</span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十五、扩展已有类型"><a href="#十五、扩展已有类型" class="headerlink" title="十五、扩展已有类型"></a>十五、扩展已有类型</h1><h2 id="通过别名方法，扩展已有类型"><a href="#通过别名方法，扩展已有类型" class="headerlink" title="通过别名方法，扩展已有类型"></a>通过别名方法，扩展已有类型</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义了新类型Queue，该类型具有几种方法</span></span><br><span class="line"><span class="keyword">type</span> Queue []<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为需要改参数，所以传地址</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Push(v <span class="type">int</span>) &#123;</span><br><span class="line">    *q = <span class="built_in">append</span>(*q, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">    head := (*q)[<span class="number">0</span>] <span class="comment">// 注意加括号</span></span><br><span class="line">    *q = (*q)[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> IsEmpty() <span class="type">bool</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(*q) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过组合方法，扩展已有类型"><a href="#通过组合方法，扩展已有类型" class="headerlink" title="通过组合方法，扩展已有类型"></a>通过组合方法，扩展已有类型</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> myStructName <span class="keyword">struct</span> &#123;</span><br><span class="line">    name *<span class="keyword">package</span>.targetStruct</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(name *myStructName)</span></span>funcName() &#123;</span><br><span class="line">    <span class="comment">//.....扩展方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过内嵌方法，扩展已有类型"><a href="#通过内嵌方法，扩展已有类型" class="headerlink" title="通过内嵌方法，扩展已有类型"></a>通过内嵌方法，扩展已有类型</h2><h1 id="十六、依赖管理-go-mod-使用"><a href="#十六、依赖管理-go-mod-使用" class="headerlink" title="十六、依赖管理 go mod 使用"></a>十六、依赖管理 go mod 使用</h1><h2 id="尝试安装-zap-包"><a href="#尝试安装-zap-包" class="headerlink" title="尝试安装 zap 包"></a>尝试安装 zap 包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get -u go.uber.org/zap</span><br></pre></td></tr></table></figure>

<h2 id="go-mod-文件自动生成依赖目录"><a href="#go-mod-文件自动生成依赖目录" class="headerlink" title="go.mod 文件自动生成依赖目录"></a>go.mod 文件自动生成依赖目录</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module gomodTest</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.17</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">    <span class="keyword">go</span>.uber.org/atomic v1<span class="number">.9</span><span class="number">.0</span> <span class="comment">// indirect</span></span><br><span class="line">    <span class="keyword">go</span>.uber.org/multierr v1<span class="number">.7</span><span class="number">.0</span> <span class="comment">// indirect</span></span><br><span class="line">    <span class="keyword">go</span>.uber.org/zap v1<span class="number">.19</span><span class="number">.1</span> <span class="comment">// indirect</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><em>go.mod 目录下 生成 go.sum 校验文件</em><br>*下载的依赖放在了go安装的位置，如 D:\go\bin\pkg\mod*</p>
<h2 id="指定-依赖的版本安装"><a href="#指定-依赖的版本安装" class="headerlink" title="指定 依赖的版本安装"></a>指定 依赖的版本安装</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u <span class="keyword">go</span>.uber.org/zap@v1<span class="number">.11</span></span><br></pre></td></tr></table></figure>

<h2 id="清除-sum-文件对历史包的引用"><a href="#清除-sum-文件对历史包的引用" class="headerlink" title="清除 .sum 文件对历史包的引用"></a>清除 .sum 文件对历史包的引用</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> mod tidy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
  </entry>
  <entry>
    <title>Golang基础笔记(下)</title>
    <url>//Golang/Golang%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0(%E4%B8%8B)/</url>
    <content><![CDATA[<h1 id="一、接口"><a href="#一、接口" class="headerlink" title="一、接口"></a>一、接口</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>定义测试接口  testInterface&#x2F;mock&#x2F;main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mock</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">struct</span> &#123;</span><br><span class="line">    Contents <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给结构体添加方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Retriever)</span></span> Get(url <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.Contents</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>定义真实接口   testInterface&#x2F;real&#x2F;main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="built_in">real</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">struct</span> &#123;</span><br><span class="line">    UserAgent <span class="type">string</span></span><br><span class="line">    TimeOut time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Retriever)</span></span> Get(url <span class="type">string</span>) <span class="type">string</span>  &#123;</span><br><span class="line">    res,err := http.Get(url)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result,err := httputil.DumpResponse(res,<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读完 Response 的 body 后需要关掉</span></span><br><span class="line">    res.Body.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用两个接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;testInterface/mock&quot;</span></span><br><span class="line">    <span class="string">&quot;testInterface/real&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">type</span> Retriver <span class="keyword">interface</span> &#123;</span><br><span class="line">    Get(url <span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法，调用接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(r Retriver)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.Get(<span class="string">&quot;https://baidu.com&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r Retriver</span><br><span class="line"></span><br><span class="line">    r = mock.Retriever&#123;Contents: <span class="string">&quot;this is a mock&quot;</span>&#125;</span><br><span class="line">    fmt.Println(download(r))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> newR Retriver</span><br><span class="line">    newR = <span class="built_in">real</span>.Retriever&#123;&#125;</span><br><span class="line">    fmt.Println(download(newR))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">interface</span> &#123;</span><br><span class="line">    call()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NokiaPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nokiaPhone NokiaPhone)</span></span> call() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am Nokia, I can call you!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(iPhone IPhone)</span></span> call() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am iPhone, I can call you!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> phone Phone</span><br><span class="line"></span><br><span class="line">    phone = <span class="built_in">new</span>(NokiaPhone)</span><br><span class="line">    phone.call()</span><br><span class="line"></span><br><span class="line">    phone = <span class="built_in">new</span>(IPhone)</span><br><span class="line">    phone.call()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、函数式编程"><a href="#二、函数式编程" class="headerlink" title="二、函数式编程"></a>二、函数式编程</h1><h2 id="闭包实现一个累加器"><a href="#闭包实现一个累加器" class="headerlink" title="闭包实现一个累加器"></a>闭包实现一个累加器</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    闭包（实现0加到i，结果是多少）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        sum += v</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := adder()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++&#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;0 加到 %d 是 %d\n&quot;</span>,i,a(i))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//0 加到 0 是 0</span></span><br><span class="line"><span class="comment">//0 加到 1 是 1</span></span><br><span class="line"><span class="comment">//0 加到 2 是 3</span></span><br><span class="line"><span class="comment">//0 加到 3 是 6</span></span><br><span class="line"><span class="comment">//0 加到 4 是 10</span></span><br><span class="line"><span class="comment">//0 加到 5 是 15</span></span><br><span class="line"><span class="comment">//0 加到 6 是 21</span></span><br><span class="line"><span class="comment">//0 加到 7 是 28</span></span><br><span class="line"><span class="comment">//0 加到 8 是 36</span></span><br><span class="line"><span class="comment">//0 加到 9 是 45</span></span><br></pre></td></tr></table></figure>

<h2 id="正统函数式编程，实现上述例子"><a href="#正统函数式编程，实现上述例子" class="headerlink" title="正统函数式编程，实现上述例子"></a>正统函数式编程，实现上述例子</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> iAdder <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> (<span class="type">int</span>, iAdder)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">(base <span class="type">int</span>)</span></span> iAdder &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> (<span class="type">int</span>,iAdder) &#123;</span><br><span class="line">        <span class="keyword">return</span> base + v, adder(base + v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := adder(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++&#123;</span><br><span class="line">        <span class="keyword">var</span> s <span class="type">int</span></span><br><span class="line">        s,a = a(i)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;0 加到 %d 是 %d\n&quot;</span>,i,s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="利用闭包实现，斐波那契数列"><a href="#利用闭包实现，斐波那契数列" class="headerlink" title="利用闭包实现，斐波那契数列"></a>利用闭包实现，斐波那契数列</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fibonacci（i = 前面两个数之和）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    a,b := <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        a,b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := fibonacci()</span><br><span class="line">    fmt.Println(f()) <span class="comment">// 1</span></span><br><span class="line">    fmt.Println(f()) <span class="comment">// 1</span></span><br><span class="line">    fmt.Println(f()) <span class="comment">// 2</span></span><br><span class="line">    fmt.Println(f()) <span class="comment">// 3</span></span><br><span class="line">    fmt.Println(f()) <span class="comment">// 5</span></span><br><span class="line">    fmt.Println(f()) <span class="comment">// 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数实现接口"><a href="#函数实现接口" class="headerlink" title="函数实现接口"></a>函数实现接口</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fibonacci（i = 前面两个数之和）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> intGen <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g intGen)</span></span> Read (p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)  &#123;</span><br><span class="line">    next := g()</span><br><span class="line">    <span class="keyword">if</span> next &gt; <span class="number">10000</span> &#123; <span class="comment">// 当数量大于10000就退出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>,io.EOF</span><br><span class="line">    &#125;</span><br><span class="line">    s := fmt.Sprintf(<span class="string">&quot;%d\n&quot;</span>,next)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> incorrect if p is too small</span></span><br><span class="line">    <span class="keyword">return</span> strings.NewReader(s).Read(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printFileContent</span><span class="params">(reader io.Reader)</span></span>  &#123;</span><br><span class="line">    scanner := bufio.NewScanner(reader)</span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        fmt.Println(scanner.Text())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span></span> intGen &#123;</span><br><span class="line">    a,b := <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        a,b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := fibonacci()</span><br><span class="line">    printFileContent(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、错误处理和资源管理"><a href="#三、错误处理和资源管理" class="headerlink" title="三、错误处理和资源管理"></a>三、错误处理和资源管理</h1><h2 id="defer-调用"><a href="#defer-调用" class="headerlink" title="defer 调用"></a>defer 调用</h2><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="number">3</span>)</span><br><span class="line">    fmt.Println(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="number">4</span>)</span><br><span class="line">    <span class="comment">// 1 2 4 3</span></span><br><span class="line">    <span class="comment">// defer函数 会在 主函数结束前调用</span></span><br><span class="line">    <span class="comment">// defer 语句是按 先进后出 顺序执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file,err := os.Create(<span class="string">&quot;haha.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close() <span class="comment">// 关闭文件</span></span><br><span class="line"></span><br><span class="line">    writer := bufio.NewWriter(file)</span><br><span class="line">    <span class="keyword">defer</span> writer.Flush() <span class="comment">// 写入文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++ &#123;</span><br><span class="line">        fmt.Fprintln(writer,i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file,err := os.OpenFile(<span class="string">&quot;haha.txt&quot;</span>,os.O_EXCL|os.O_CREATE,<span class="number">0666</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 若 error 是 *os.PathError</span></span><br><span class="line">        <span class="keyword">if</span> patherr,ok := err.(*os.PathError);ok&#123;</span><br><span class="line">            fmt.Println(patherr.Op)</span><br><span class="line">            fmt.Println(patherr.Path)</span><br><span class="line">            fmt.Println(patherr.Err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 新建 error</span></span><br><span class="line">            err = errors.New(<span class="string">&quot;other error&quot;</span>)</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close() <span class="comment">// 关闭文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、测试与性能调优"><a href="#四、测试与性能调优" class="headerlink" title="四、测试与性能调优"></a>四、测试与性能调优</h1><h2 id="表格驱动测试"><a href="#表格驱动测试" class="headerlink" title="表格驱动测试"></a>表格驱动测试</h2><p>main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a,b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>add_test.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    tests := []<span class="keyword">struct</span>&#123; a,b,c <span class="type">int</span>&#125; &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,tt := <span class="keyword">range</span> tests&#123;</span><br><span class="line">        <span class="keyword">if</span> res := Add(tt.a,tt.b); res != tt.c&#123;</span><br><span class="line">            t.Errorf(<span class="string">&quot;计算错误：%d + %d = %d，而不是 %d&quot;</span>,tt.a,tt.b,res,tt.c)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>开始测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go test .</span><br></pre></td></tr></table></figure>

<h2 id="代码覆盖率测试"><a href="#代码覆盖率测试" class="headerlink" title="代码覆盖率测试"></a>代码覆盖率测试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go test -coverprofile=cover.out ./internal/... </span><br><span class="line">go tool cover -html=cover.out</span><br></pre></td></tr></table></figure>
<p><em>(.&#x2F;internal&#x2F;…) 表示internal下所有的测试代码</em></p>
<h2 id="代码性能测试-基准测试"><a href="#代码性能测试-基准测试" class="headerlink" title="代码性能测试(基准测试)"></a>代码性能测试(基准测试)</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkAdd</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a,aa <span class="type">int</span></span><br><span class="line">    a = <span class="number">1000</span></span><br><span class="line">    aa = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> res := Add(a,aa); res != <span class="number">3000</span>&#123;</span><br><span class="line">            b.Errorf(<span class="string">&quot;计算错误：%d + %d = %d，而不是 %d&quot;</span>,a,aa,res,<span class="number">3000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go test -bench .</span><br></pre></td></tr></table></figure>

<h2 id="利用-pprof-进行性能调优"><a href="#利用-pprof-进行性能调优" class="headerlink" title="利用 pprof 进行性能调优"></a>利用 pprof 进行性能调优</h2><h3 id="安装-Graphviz"><a href="#安装-Graphviz" class="headerlink" title="安装 Graphviz"></a>安装 <a href="https://graphviz.org/download/">Graphviz</a></h3><h3 id="查看性能"><a href="#查看性能" class="headerlink" title="查看性能"></a>查看性能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go test -bench . -cpuprofile cpu.out </span><br><span class="line">go tool pprof cpu.out</span><br><span class="line">web</span><br></pre></td></tr></table></figure>

<h1 id="五、Goroutine（协程）"><a href="#五、Goroutine（协程）" class="headerlink" title="五、Goroutine（协程）"></a>五、Goroutine（协程）</h1><h2 id="goroutine-概述"><a href="#goroutine-概述" class="headerlink" title="goroutine 概述"></a>goroutine 概述</h2><ul>
<li>轻量级“线程”</li>
<li>非抢占式多任务处理，由协程主动交出控制权</li>
<li>编译器 &#x2F; 解释器 &#x2F; 虚拟机层面的多任务</li>
<li>多个协程可能在一个或多个线程上运行（线程数量一般不大于机器核数）</li>
</ul>
<h2 id="goroutine-并发例子"><a href="#goroutine-并发例子" class="headerlink" title="goroutine 并发例子"></a>goroutine 并发例子</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="comment">//for &#123;</span></span><br><span class="line">                fmt.Println(<span class="string">&quot;i am routine&quot;</span>,j)　　　　　　　　　　<span class="comment">// runtime.Gosched() // 手动交出控制权</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="goroutine-可能会切换的点"><a href="#goroutine-可能会切换的点" class="headerlink" title="goroutine 可能会切换的点"></a>goroutine 可能会切换的点</h2><blockquote>
<p>解释：任何函数加上go就能送到调度器运行，调度器会在合适的位置进行协程的切换</p>
</blockquote>
<ul>
<li>I&#x2F;O,select</li>
<li>channel</li>
<li>等待锁</li>
<li>函数调用（有时）</li>
<li>runtime.Gosched()</li>
</ul>
<h2 id="检测数据访问冲突（检测race-condition）"><a href="#检测数据访问冲突（检测race-condition）" class="headerlink" title="检测数据访问冲突（检测race condition）"></a>检测数据访问冲突（检测race condition）</h2><p>代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    a := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123; <span class="comment">//race condition</span></span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                a++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>检测命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go run -race test.go</span><br></pre></td></tr></table></figure>

<h1 id="六、Channel（通道）"><a href="#六、Channel（通道）" class="headerlink" title="六、Channel（通道）"></a>六、Channel（通道）</h1><h2 id="简单收发channel"><a href="#简单收发channel" class="headerlink" title="简单收发channel"></a>简单收发channel</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            n := &lt;- c <span class="comment">// 接收 channel 的数据</span></span><br><span class="line">            fmt.Println(n)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送 channel 数据</span></span><br><span class="line">    c &lt;- <span class="number">1</span></span><br><span class="line">    c &lt;- <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="channel-批量收发数据"><a href="#channel-批量收发数据" class="headerlink" title="channel 批量收发数据"></a>channel 批量收发数据</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义 channel 数组</span></span><br><span class="line">    <span class="keyword">var</span> channels [<span class="number">10</span>]<span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量收数据</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        channels[i] = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">        <span class="keyword">go</span> worker(i,channels[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量发数据</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        channels[i] &lt;- i + <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span> <span class="params">(i <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n := &lt;- c <span class="comment">// 接收 channel 的数据</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;接收来自 %d 通道，数据%v\n&quot;</span>,i,n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="channel-通道类型"><a href="#channel-通道类型" class="headerlink" title="channel 通道类型"></a>channel 通道类型</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双向通道</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅发送类型</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//仅接收类型</span></span><br><span class="line"><span class="keyword">var</span> c &lt;-<span class="keyword">chan</span> <span class="type">int</span></span><br></pre></td></tr></table></figure>

<h2 id="channel-的缓冲区"><a href="#channel-的缓冲区" class="headerlink" title="channel 的缓冲区"></a>channel 的缓冲区</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    bufferedChan()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bufferedChan</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>,<span class="number">3</span>) <span class="comment">// 给通道设定缓冲区</span></span><br><span class="line">    <span class="keyword">go</span> worker(<span class="number">0</span>,c)</span><br><span class="line">    c &lt;- <span class="number">11</span></span><br><span class="line">    c &lt;- <span class="number">22</span></span><br><span class="line">    c &lt;- <span class="number">33</span></span><br><span class="line">    <span class="built_in">close</span>(c) <span class="comment">// 关闭通道</span></span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span> <span class="params">(i <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 若从通道收不到数据就退出</span></span><br><span class="line">    <span class="comment">//for &#123;</span></span><br><span class="line">    <span class="comment">//    n,ok := &lt;- c</span></span><br><span class="line">    <span class="comment">//    if !ok &#123;</span></span><br><span class="line">    <span class="comment">//        break</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//    fmt.Printf(&quot;接收来自 %d 通道，数据%v\n&quot;,i,n)</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同理，若通道有数据就打印</span></span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;接收来自 %d 通道，数据%v\n&quot;</span>,i,n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="channel-等待所有-goroutine-结束"><a href="#channel-等待所有-goroutine-结束" class="headerlink" title="channel 等待所有 goroutine 结束"></a>channel 等待所有 goroutine 结束</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> workStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    in <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">    done <span class="keyword">chan</span> <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义 channel 数组</span></span><br><span class="line">    <span class="keyword">var</span> channels [<span class="number">10</span>]workStruct</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        channels[i] = workStruct&#123;</span><br><span class="line">            in : <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">            done: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量收数据</span></span><br><span class="line">    <span class="keyword">for</span> i,w := <span class="keyword">range</span> channels&#123;</span><br><span class="line">        <span class="keyword">go</span> worker(i,w)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量发数据</span></span><br><span class="line">    <span class="keyword">for</span> i,w := <span class="keyword">range</span> channels&#123;</span><br><span class="line">        w.in &lt;- <span class="string">&#x27;a&#x27;</span> + i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当接收完 channels 里面的 done ，表示 channel 执行完毕</span></span><br><span class="line">    <span class="keyword">for</span> _,w := <span class="keyword">range</span> channels&#123;</span><br><span class="line">        &lt;-w.done</span><br><span class="line">        <span class="built_in">close</span>(w.in)</span><br><span class="line">        <span class="built_in">close</span>(w.done)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;执行后续操作&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span> <span class="params">(i <span class="type">int</span>, c workStruct)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 同理，若通道有数据就打印</span></span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> c.in &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;接收来自 %d 通道，数据%v\n&quot;</span>,i,n)</span><br><span class="line">        c.done &lt;- <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WaitGroup-等待所有-goroutine-结束"><a href="#WaitGroup-等待所有-goroutine-结束" class="headerlink" title="WaitGroup 等待所有 goroutine 结束"></a>WaitGroup 等待所有 goroutine 结束</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    chanDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> workStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    in <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">    wg *sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 channel 数组</span></span><br><span class="line">    <span class="keyword">var</span> channels [<span class="number">10</span>]workStruct</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        channels[i] = workStruct&#123;</span><br><span class="line">            in : <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">            wg: &amp;wg,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Add(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量收数据</span></span><br><span class="line">    <span class="keyword">for</span> i,w := <span class="keyword">range</span> channels&#123;</span><br><span class="line">        <span class="keyword">go</span> worker(i,w)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量发数据</span></span><br><span class="line">    <span class="keyword">for</span> i,w := <span class="keyword">range</span> channels&#123;</span><br><span class="line">        w.in &lt;- <span class="string">&#x27;a&#x27;</span> + i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;执行后续操作&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span> <span class="params">(i <span class="type">int</span>, c workStruct)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 若通道有数据就打印</span></span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> c.in &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;接收来自 %d 通道，数据%v\n&quot;</span>,i,n)</span><br><span class="line">        c.wg.Done()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="select-接收或发送某个-channel-的值"><a href="#select-接收或发送某个-channel-的值" class="headerlink" title="select 接收或发送某个 channel 的值"></a>select 接收或发送某个 channel 的值</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c1, c2 = generator(), generator()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> n := &lt;-c1:</span><br><span class="line">            fmt.Println(<span class="string">&quot;c1里面来了数据&quot;</span>, n)</span><br><span class="line">        <span class="keyword">case</span> n := &lt;-c1:    </span><br><span class="line">            fmt.Println(<span class="string">&quot;走这里&quot;</span>, n) </span><br><span class="line">        <span class="keyword">case</span> n := &lt;-c2:</span><br><span class="line">            fmt.Println(<span class="string">&quot;c2里面来了数据&quot;</span>, n)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generator</span><span class="params">()</span></span> <span class="keyword">chan</span> <span class="type">int</span> &#123;</span><br><span class="line">    out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            time.Sleep(time.Duration(rand.Intn(<span class="number">100</span>)) * time.Millisecond)</span><br><span class="line">            out &lt;- i</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="select-语法概述"><a href="#select-语法概述" class="headerlink" title="select 语法概述"></a>select 语法概述</h2><ul>
<li>每个 case 都必须是一个通信</li>
<li>所有 channel 表达式都会被求值</li>
<li>所有被发送的表达式都会被求值</li>
<li>如果任意某个通信可以进行，它就执行，其他被忽略。</li>
<li>如果有多个 case 都可以运行，Select 会随机公平地选出一个执行。其他不会执行。</li>
<li>否则：<ul>
<li>如果有 default 子句，则执行该语句。</li>
<li>如果没有 default 子句，select 将阻塞，直到某个通信可以运行；Go 不会重新对 channel 或值进行求值</li>
</ul>
</li>
</ul>
<h2 id="传统同步机制"><a href="#传统同步机制" class="headerlink" title="传统同步机制"></a>传统同步机制</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> atomicInt <span class="keyword">struct</span> &#123;</span><br><span class="line">    value <span class="type">int</span></span><br><span class="line">    lock sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *atomicInt)</span></span> increment() &#123;</span><br><span class="line">    a.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> a.lock.Unlock()</span><br><span class="line">    a.value++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *atomicInt)</span></span> get() <span class="type">int</span> &#123;</span><br><span class="line">    a.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> a.lock.Unlock()</span><br><span class="line">    <span class="keyword">return</span> <span class="type">int</span>(a.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a atomicInt</span><br><span class="line">    a.increment()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        a.increment()</span><br><span class="line">    &#125;()</span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">    fmt.Println(a.get())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
  </entry>
  <entry>
    <title>Gorm数据库驱动</title>
    <url>//Go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6/Gorm%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">charset=utf8mb4&amp;parseTime=True&amp;loc=Local</span></span><br><span class="line">  <span class="attr">db-name:</span> <span class="string">localpro</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="comment">// &quot;gorm.io/gorm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DB 数据库驱动</span></span><br><span class="line"><span class="keyword">var</span> DB *gorm.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// initGorm 初始化数据库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initGorm</span><span class="params">(cfg *configs.Config)</span></span> &#123;</span><br><span class="line">	mcfg := cfg.Mysql</span><br><span class="line"></span><br><span class="line">	dsn := fmt.Sprintf(<span class="string">&quot;%s:%s@tcp(%s:%s)/%s?%s&quot;</span>, mcfg.Username, mcfg.Password, mcfg.Path, mcfg.Port, mcfg.DbName, mcfg.Config)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// newLogger := logger.New(</span></span><br><span class="line">	<span class="comment">// 	log.New(os.Stdout, &quot;\r\n&quot;, log.Ldate), // io writer（日志输出的目标，前缀和日志包含的内容——译者注）</span></span><br><span class="line">	<span class="comment">// 	logger.Config&#123;</span></span><br><span class="line">	<span class="comment">// 		SlowThreshold:             time.Second, // 慢 SQL 阈值</span></span><br><span class="line">	<span class="comment">// 		LogLevel:                  logger.Info, // 日志级别</span></span><br><span class="line">	<span class="comment">// 		IgnoreRecordNotFoundError: true,        // 忽略ErrRecordNotFound（记录未找到）错误</span></span><br><span class="line">	<span class="comment">// 		Colorful:                  true,        // 彩色打印</span></span><br><span class="line">	<span class="comment">// 	&#125;,</span></span><br><span class="line">	<span class="comment">// )</span></span><br><span class="line"></span><br><span class="line">	DB, _ = gorm.Open(mysql.Open(dsn)) <span class="comment">// &amp;gorm.Config&#123;Logger: newLogger&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Go微服务组件</category>
      </categories>
  </entry>
  <entry>
    <title>Go使用GRPC</title>
    <url>//GRPC/Go%E4%BD%BF%E7%94%A8GRPC/</url>
    <content><![CDATA[<h1 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">	go install google.golang.org/protobuf/cmd/protoc-gen-go@latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">	protoc --go_out=. proto/*.proto</span></span><br><span class="line"></span><br><span class="line">	go install github.com/envoyproxy/protoc-gen-validate@latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">	protoc --go_out=. --validate_out=<span class="string">&quot;lang=go:.&quot;</span>  proto/*.proto</span></span><br><span class="line"></span><br><span class="line">	go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">	protoc --go-grpc_out=. proto/*.proto</span></span><br><span class="line"></span><br><span class="line">	go install github.com/favadi/protoc-go-inject-tag@latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">	protoc-go-inject-tag -input=./protocol/example/*.pb.go</span></span><br><span class="line"></span><br><span class="line">	go install github.com/golang/mock/mockgen@latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">	mockgen -<span class="built_in">source</span>=db.go -destination=db_mock.go -package=main</span></span><br><span class="line"></span><br><span class="line">	go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">	protoc --grpc-gateway_out=. hello.proto</span></span><br><span class="line"></span><br><span class="line">	go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">	protoc --openapiv2_out=. hello.proto</span></span><br></pre></td></tr></table></figure>

<h1 id="编写proto"><a href="#编写proto" class="headerlink" title="编写proto"></a>编写proto</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package example;</span><br><span class="line"></span><br><span class="line">import &quot;proto/common/validate.proto&quot;;</span><br><span class="line"></span><br><span class="line">option go_package = &quot;./protocol/user;userPb&quot;;</span><br><span class="line"></span><br><span class="line">service UserSrv &#123;</span><br><span class="line">  // 获取用户信息</span><br><span class="line">  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoReply);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GetUserInfoRequest &#123;</span><br><span class="line">  // @gotags: gorm:&quot;-&quot;</span><br><span class="line">  int64 user_id = 1 [(validate.rules).int64.gt = 0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GetUserInfoReply &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">protoc --go_out=. --validate_out=&quot;lang=go:.&quot; --go-grpc_out=. --grpc-gateway_out=. --grpc-gateway_opt generate_unbound_methods=true --openapiv2_out=. --openapiv2_opt generate_unbound_methods=true proto/user.proto</span><br><span class="line">protoc-go-inject-tag -input=./protocol/user/*.pb.go</span><br></pre></td></tr></table></figure>

<h1 id="GRPC-服务端"><a href="#GRPC-服务端" class="headerlink" title="GRPC 服务端"></a>GRPC 服务端</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GrpcRun</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GrpcRun</span><span class="params">(cfg *configs.Config)</span></span> &#123;</span><br><span class="line">	config := cfg.Register</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 证书认证</span></span><br><span class="line">	<span class="comment">// creds, err := credentials.NewServerTLSFromFile(&quot;server.crt&quot;, &quot;server.key&quot;)</span></span><br><span class="line">	<span class="comment">// if err != nil &#123;</span></span><br><span class="line">	<span class="comment">//     log.Fatal(err)</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册拦截器</span></span><br><span class="line">	opt := []grpc.ServerOption&#123;</span><br><span class="line">		grpc.UnaryInterceptor(tools.ValidateInterceptor),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	server := grpc.NewServer(opt...)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册service</span></span><br><span class="line"></span><br><span class="line">	grpc_health_v1.RegisterHealthServer(server, health.NewServer()) <span class="comment">// 健康检查</span></span><br><span class="line"></span><br><span class="line">	userPb.RegisterUserSrvServer(server, logic.NewUserSrvServer()) <span class="comment">// 用户服务</span></span><br><span class="line"></span><br><span class="line">	reflection.Register(server) <span class="comment">// grpccurl调试</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 监听端口</span></span><br><span class="line">	listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:&quot;</span>+config.GrpcPort)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;[GrpcRun] Listen err = %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tools.Log.Info(ctx, <span class="string">&quot;launch grpc %s success at %s&quot;</span>, config.Name, <span class="string">&quot;grpc://&quot;</span>+tools.GetOwnIP()+<span class="string">&quot;:&quot;</span>+config.GrpcPort)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 开启服务</span></span><br><span class="line">	<span class="keyword">if</span> err = server.Serve(listener); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;[GrpcRun] Serve err: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="GRPC-客户端，ip方式寻址"><a href="#GRPC-客户端，ip方式寻址" class="headerlink" title="GRPC 客户端，ip方式寻址"></a>GRPC 客户端，ip方式寻址</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GetUserSrvClientByIp</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserSrvClientByIp</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	opts := []grpc.DialOption&#123;</span><br><span class="line">		grpc.WithTransportCredentials(insecure.NewCredentials()),</span><br><span class="line">		<span class="comment">// grpc.WithBlock(), // 阻塞</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> conn, err := grpc.Dial(<span class="string">&quot;127.0.0.1:50051&quot;</span>, opts...); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[greeterByIp] Dial err = %v&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		UserSrvClient = userPb.NewUserSrvClient(conn)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// defer func(conn *grpc.ClientConn) &#123;</span></span><br><span class="line">	<span class="comment">// 	err := conn.Close()</span></span><br><span class="line">	<span class="comment">// 	if err != nil &#123;</span></span><br><span class="line">	<span class="comment">// 		panic(err)</span></span><br><span class="line">	<span class="comment">// 	&#125;</span></span><br><span class="line">	<span class="comment">// &#125;(client)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="GRPC-客户端，consul方式寻址"><a href="#GRPC-客户端，consul方式寻址" class="headerlink" title="GRPC 客户端，consul方式寻址"></a>GRPC 客户端，consul方式寻址</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GetUserSrvClientByConsul</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserSrvClientByConsul</span><span class="params">()</span></span> &#123;</span><br><span class="line">	opts := []grpc.DialOption&#123;</span><br><span class="line">		grpc.WithTransportCredentials(insecure.NewCredentials()),</span><br><span class="line">		grpc.WithDefaultServiceConfig(<span class="string">`&#123;&quot;loadBalancingPolicy&quot;:&quot;round_robin&quot;&#125;`</span>), <span class="comment">// 负载均衡</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> conn, err := grpc.Dial(<span class="string">&quot;consul://127.0.0.1:8500/grpc.app.server.service&quot;</span>, opts...); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[greeter] Dial err = %v&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		UserSrvClient = userPb.NewUserSrvClient(conn)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="客户端请求示例"><a href="#客户端请求示例" class="headerlink" title="客户端请求示例"></a>客户端请求示例</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">req := examplePb.HelloRequest&#123;</span><br><span class="line">	Name: <span class="string">&quot;看看请求&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">rsp, err := GreeterClient.SayHello(context.Background(), &amp;req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	t.Errorf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">t.Errorf(<span class="string">&quot;%v&quot;</span>, rsp)</span><br></pre></td></tr></table></figure>

<h1 id="GRPC-Gateway-方式，开启-HTTP-服务"><a href="#GRPC-Gateway-方式，开启-HTTP-服务" class="headerlink" title="GRPC Gateway 方式，开启 HTTP 服务"></a>GRPC Gateway 方式，开启 HTTP 服务</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GatewayRun</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GatewayRun</span><span class="params">(cfg *configs.Config)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	ctx := context.Background()</span><br><span class="line"></span><br><span class="line">	mux := runtime.NewServeMux()</span><br><span class="line"></span><br><span class="line">	endpoint := <span class="string">&quot;:&quot;</span> + cfg.Register.GrpcPort</span><br><span class="line"></span><br><span class="line">	opts := []grpc.DialOption&#123;</span><br><span class="line">		grpc.WithTransportCredentials(insecure.NewCredentials()),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := userPb.RegisterUserSrvHandlerFromEndpoint(ctx, mux, endpoint, opts); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[GatewayRun] RegisterUserSrvHandlerFromEndpoint err = %v&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tools.Log.Info(ctx, <span class="string">&quot;launch http %s success at %s&quot;</span>, cfg.Register.Name, <span class="string">&quot;http://&quot;</span>+tools.GetOwnIP()+<span class="string">&quot;:&quot;</span>+cfg.Register.HttpPort)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;:&quot;</span>+cfg.Register.HttpPort, mux); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[GatewayRun] ListenAndServe err = %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>GRPC</category>
      </categories>
  </entry>
  <entry>
    <title>Go标准库flag</title>
    <url>//Golang/Go%E6%A0%87%E5%87%86%E5%BA%93flag/</url>
    <content><![CDATA[<h2 id="程序为"><a href="#程序为" class="headerlink" title="程序为"></a>程序为</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;flag&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  intflag <span class="type">int</span></span><br><span class="line">  boolflag <span class="type">bool</span></span><br><span class="line">  stringflag <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">  flag.IntVar(&amp;intflag, <span class="string">&quot;intflag&quot;</span>, <span class="number">0</span>, <span class="string">&quot;int flag value&quot;</span>)</span><br><span class="line">  flag.BoolVar(&amp;boolflag, <span class="string">&quot;boolflag&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;bool flag value&quot;</span>)</span><br><span class="line">  flag.StringVar(&amp;stringflag, <span class="string">&quot;stringflag&quot;</span>, <span class="string">&quot;default&quot;</span>, <span class="string">&quot;string flag value&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 将用户输入的变量解析为变量值</span></span><br><span class="line">  flag.Parse()</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;int flag:&quot;</span>, intflag)</span><br><span class="line">  fmt.Println(<span class="string">&quot;bool flag:&quot;</span>, boolflag)</span><br><span class="line">  fmt.Println(<span class="string">&quot;string flag:&quot;</span>, stringflag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./main -h</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">./main -intflag <span class="number">1</span> -boolflag <span class="literal">false</span> -stringflag <span class="string">&quot;haha&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
  </entry>
  <entry>
    <title>Go标准库recover</title>
    <url>//Golang/Go%E6%A0%87%E5%87%86%E5%BA%93recover/</url>
    <content><![CDATA[<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// 必须要先声明defer，否则不能捕获到panic异常</span></span><br><span class="line">      fmt.Println(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">         fmt.Println(err) <span class="comment">// 这里的err其实就是panic传入的内容</span></span><br><span class="line">      &#125;</span><br><span class="line">      fmt.Println(<span class="string">&quot;e&quot;</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   f() <span class="comment">//开始调用f</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;f&quot;</span>) <span class="comment">//这里开始下面代码不会再执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">   <span class="built_in">panic</span>(<span class="string">&quot;异常信息&quot;</span>)</span><br><span class="line">   fmt.Println(<span class="string">&quot;b&quot;</span>) <span class="comment">//这里开始下面代码不会再执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c</span><br><span class="line">a</span><br><span class="line">d</span><br><span class="line">异常信息</span><br><span class="line">e</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
  </entry>
  <entry>
    <title>Jaeger链路追踪</title>
    <url>//Go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6/Jaeger%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tracing_url:</span> <span class="string">http://127.0.0.1:14268/api/traces</span></span><br></pre></td></tr></table></figure>

<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;go.opentelemetry.io/otel&quot;</span></span><br><span class="line"><span class="comment">// &quot;go.opentelemetry.io/otel/attribute&quot;</span></span><br><span class="line"><span class="comment">// &quot;go.opentelemetry.io/otel/exporters/jaeger&quot;</span></span><br><span class="line"><span class="comment">// &quot;go.opentelemetry.io/otel/sdk/resource&quot;</span></span><br><span class="line"><span class="comment">// tracesdk &quot;go.opentelemetry.io/otel/sdk/trace&quot;</span></span><br><span class="line"><span class="comment">// semconv &quot;go.opentelemetry.io/otel/semconv/v1.17.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tp *tracesdk.TracerProvider</span><br><span class="line"></span><br><span class="line"><span class="comment">// initTracing 链路追踪初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initTracing</span><span class="params">(cfg *configs.Config)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	tp, err = tracerProvider(cfg)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[initTracing] tracerProvider err = %v&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Register our TracerProvider as the global so any imported</span></span><br><span class="line">	<span class="comment">// instrumentation in the future will default to using it.</span></span><br><span class="line">	otel.SetTracerProvider(tp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tracerProvider returns an OpenTelemetry TracerProvider configured to use</span></span><br><span class="line"><span class="comment">// the Jaeger exporter that will send spans to the provided url. The returned</span></span><br><span class="line"><span class="comment">// TracerProvider will also use a Resource configured with all the information</span></span><br><span class="line"><span class="comment">// about the application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tracerProvider</span><span class="params">(cfg *configs.Config)</span></span> (*tracesdk.TracerProvider, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// Create the Jaeger exporter</span></span><br><span class="line">	exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(cfg.TracingUrl)))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	srvAddr := tools.GetOwnIP() + <span class="string">&quot;:&quot;</span> + cfg.Register.GrpcPort</span><br><span class="line"></span><br><span class="line">	TracerProvider := tracesdk.NewTracerProvider(</span><br><span class="line">		<span class="comment">// Always be sure to batch in production.</span></span><br><span class="line">		tracesdk.WithBatcher(exp),</span><br><span class="line">		<span class="comment">// Record information about this application in a Resource.</span></span><br><span class="line">		tracesdk.WithResource(resource.NewWithAttributes(</span><br><span class="line">			semconv.SchemaURL,</span><br><span class="line">			semconv.ServiceName(cfg.Register.Name),</span><br><span class="line">			attribute.String(<span class="string">&quot;namespace&quot;</span>, cfg.Namespace),</span><br><span class="line">			attribute.String(<span class="string">&quot;address&quot;</span>, srvAddr),</span><br><span class="line">		)),</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> TracerProvider, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="server-初始化"><a href="#server-初始化" class="headerlink" title="server 初始化"></a>server 初始化</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUserSrvServer</span><span class="params">()</span></span> userPb.UserSrvServer &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;usrv&#123;</span><br><span class="line">		tracer: otel.Tracer(<span class="string">&quot;UserSrvServer&quot;</span>),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="正常使用"><a href="#正常使用" class="headerlink" title="正常使用"></a>正常使用</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ctx, span := u.tracer.Start(ctx, <span class="string">&quot;GetUserInfo&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> span.End()</span><br></pre></td></tr></table></figure>

<h2 id="可以设置一些key-信息"><a href="#可以设置一些key-信息" class="headerlink" title="可以设置一些key 信息"></a>可以设置一些key 信息</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_, span := tracer.Start(ctx, <span class="string">&quot;getUserInfoName&quot;</span>)</span><br><span class="line">span.SetAttributes(attribute.Key(<span class="string">&quot;testset&quot;</span>).String(<span class="string">&quot;value&quot;</span>))</span><br><span class="line"><span class="keyword">defer</span> span.End()</span><br></pre></td></tr></table></figure>

<h1 id="退出链路追踪"><a href="#退出链路追踪" class="headerlink" title="退出链路追踪"></a>退出链路追踪</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exitTracing</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> tp == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := tp.Shutdown(context.Background()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[exitTracing] Shutdown err = %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Go微服务组件</category>
      </categories>
  </entry>
  <entry>
    <title>Kafka消息中间件</title>
    <url>//Go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6/Kafka%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kafka:</span></span><br><span class="line">  <span class="attr">producer_url:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9093</span></span><br><span class="line">  <span class="attr">consumer_url:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9093</span></span><br></pre></td></tr></table></figure>

<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;github.com/Shopify/sarama&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	Producer sarama.SyncProducer</span><br><span class="line">	Consumer sarama.Consumer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initKafka</span><span class="params">(cfg *configs.Config)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// config := sarama.NewConfig()</span></span><br><span class="line">	<span class="comment">// config.Producer.RequiredAcks = sarama.WaitForAll          // 发送完数据需要leader和follow都确认</span></span><br><span class="line">	<span class="comment">// config.Producer.Partitioner = sarama.NewRandomPartitioner // 新选出一个partition</span></span><br><span class="line">	<span class="comment">// config.Producer.Return.Successes = true                   // 成功交付的消息将在success channel返回</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(cfg.Kafka.ProducerUrl) != <span class="number">0</span> &#123;</span><br><span class="line">		Producer, err = sarama.NewSyncProducer(cfg.Kafka.ProducerUrl, <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			tools.Log.Error(ctx, <span class="string">&quot;[initKafka] Producer err = %v&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(cfg.Kafka.ConsumerUrl) != <span class="number">0</span> &#123;</span><br><span class="line">		Consumer, err = sarama.NewConsumer(cfg.Kafka.ConsumerUrl, <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			tools.Log.Error(ctx, <span class="string">&quot;[initKafka] Consumer err = %v&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="生产示例"><a href="#生产示例" class="headerlink" title="生产示例"></a>生产示例</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">msg := &amp;sarama.ProducerMessage&#123;</span><br><span class="line">	Topic: <span class="string">&quot;web_log&quot;</span>,</span><br><span class="line">	Key:   sarama.StringEncoder(<span class="string">&quot;imkey&quot;</span>),</span><br><span class="line">	Value: sarama.StringEncoder(<span class="string">&quot;imvalue&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid, offset, err := Producer.SendMessage(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;send msg failed, err:&quot;</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;pid:%v offset:%v\n&quot;</span>, pid, offset)</span><br></pre></td></tr></table></figure>

<h1 id="消费示例"><a href="#消费示例" class="headerlink" title="消费示例"></a>消费示例</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">partitionList, err := Consumer.Partitions(<span class="string">&quot;web_log&quot;</span>) <span class="comment">// 根据topic取到所有的分区</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历所有的分区</span></span><br><span class="line"><span class="keyword">for</span> partition := <span class="keyword">range</span> partitionList &#123;</span><br><span class="line">	<span class="comment">// 针对每个分区创建一个对应的分区消费者</span></span><br><span class="line">	pc, err := Consumer.ConsumePartition(<span class="string">&quot;web_log&quot;</span>, <span class="type">int32</span>(partition), sarama.OffsetNewest)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(sarama.PartitionConsumer)</span></span> &#123; <span class="comment">// 异步从每个分区消费信息</span></span><br><span class="line">		<span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;Partition:%d Offset:%d Key:%v Value:%v&quot;</span>, msg.Partition, msg.Offset, <span class="type">string</span>(msg.Key), <span class="type">string</span>(msg.Value))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;(pc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go微服务组件</category>
      </categories>
  </entry>
  <entry>
    <title>Nacos配置中心</title>
    <url>//Go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dev formal</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server-config:</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/nacos</span></span><br><span class="line">  <span class="attr">ip-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8849</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line"></span><br><span class="line"><span class="attr">client-config:</span></span><br><span class="line">  <span class="attr">namespace-id:</span> <span class="string">5bb8c24e-f263-40bd-bf8b-71f75272f314</span></span><br><span class="line">  <span class="attr">timeout-ms:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">not-load-cache-at-start:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log-dir:</span> <span class="string">./tmp</span></span><br><span class="line">  <span class="attr">cache-dir:</span> <span class="string">./tmp</span></span><br><span class="line">  <span class="attr">log-level:</span> <span class="string">warn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">config-param:</span></span><br><span class="line">  <span class="attr">data-id:</span> <span class="string">config</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">&quot;dev&quot;</span> <span class="comment"># 用 namespace 做 group</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="连接配置中心，获取配置文件"><a href="#连接配置中心，获取配置文件" class="headerlink" title="连接配置中心，获取配置文件"></a>连接配置中心，获取配置文件</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> configClient config_client.IConfigClient</span><br><span class="line"><span class="keyword">var</span> configCenterUrl <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DownOnlineConfig</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DownOnlineConfig</span><span class="params">(localCfg *configs.ConfigCenter)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> localCfg == <span class="literal">nil</span> || localCfg.Namespace == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 配置中心信息</span></span><br><span class="line">	sConfig := localCfg.ServerConfig</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ping失败就退出</span></span><br><span class="line">	configCenterUrl = sConfig.IpAddr</span><br><span class="line">	<span class="keyword">if</span> !tools.PingUrl(configCenterUrl) &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[DownOnlineConfig] PingUrl fail&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	serverConfigs := []constant.ServerConfig&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			ContextPath: sConfig.ContextPath, <span class="comment">// Nacos的ContextPath</span></span><br><span class="line">			IpAddr:      sConfig.IpAddr,</span><br><span class="line">			Port:        <span class="type">uint64</span>(sConfig.Port),</span><br><span class="line">			Scheme:      sConfig.Scheme, <span class="comment">// Nacos的服务地址前缀</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 客户端信息</span></span><br><span class="line">	cConfig := localCfg.ClientConfig</span><br><span class="line">	clientConfig := constant.ClientConfig&#123;</span><br><span class="line">		NamespaceId:         cConfig.NamespaceId,</span><br><span class="line">		TimeoutMs:           <span class="type">uint64</span>(cConfig.TimeoutMs),</span><br><span class="line">		NotLoadCacheAtStart: cConfig.NotLoadCacheAtStart,</span><br><span class="line">		LogDir:              cConfig.LogDir,</span><br><span class="line">		CacheDir:            cConfig.CacheDir,</span><br><span class="line">		LogLevel:            cConfig.LogLevel,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建动态配置客户端</span></span><br><span class="line">	<span class="keyword">if</span> configClient, err = clients.NewConfigClient(</span><br><span class="line">		vo.NacosClientParam&#123;</span><br><span class="line">			ClientConfig:  &amp;clientConfig,</span><br><span class="line">			ServerConfigs: serverConfigs,</span><br><span class="line">		&#125;,</span><br><span class="line">	); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[DownOnlineConfig] NewConfigClient err = %v&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取配置</span></span><br><span class="line">	content, err := configClient.GetConfig(vo.ConfigParam&#123;</span><br><span class="line">		DataId: localCfg.ConfigParam.DataId,</span><br><span class="line">		Group:  localCfg.Namespace&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[DownOnlineConfig] GetConfig err = %v&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 保存配置文件</span></span><br><span class="line">	<span class="keyword">if</span> err = os.WriteFile(<span class="string">`./config.yaml`</span>, []<span class="type">byte</span>(content), <span class="number">0666</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[DownOnlineConfig] WriteFile err = %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="监听到配置变化，更新服务"><a href="#监听到配置变化，更新服务" class="headerlink" title="监听到配置变化，更新服务"></a>监听到配置变化，更新服务</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// listenConfig 监听配置中心变化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listenConfig</span><span class="params">(localCfg *configs.ConfigCenter)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	configParam := localCfg.ConfigParam</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err := configClient.ListenConfig(vo.ConfigParam&#123;</span><br><span class="line">			DataId: configParam.DataId,</span><br><span class="line">			Group:  localCfg.Namespace,</span><br><span class="line">			OnChange: <span class="function"><span class="keyword">func</span><span class="params">(namespace, group, dataId, data <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">				<span class="keyword">if</span> err := os.WriteFile(<span class="string">`./config.yaml`</span>, []<span class="type">byte</span>(data), <span class="number">0666</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">					tools.Log.Error(ctx, <span class="string">&quot;[listenConfig] WriteFile err = %v&quot;</span>, err)</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// TODO</span></span><br><span class="line">				<span class="comment">// cfg := ReadOnlineConfig() // 更新配置</span></span><br><span class="line">				<span class="comment">// pkg.Init(cfg)             // 重载工具</span></span><br><span class="line">				tools.Log.Error(ctx, <span class="string">&quot;[listenConfig] configs reload success&quot;</span>)</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			tools.Log.Error(ctx, <span class="string">&quot;[listenConfig] ListenConfig err = %v&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go微服务组件</category>
      </categories>
  </entry>
  <entry>
    <title>Viper配置读取</title>
    <url>//Go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6/Viper%E9%85%8D%E7%BD%AE%E8%AF%BB%E5%8F%96/</url>
    <content><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReadOnlineConfig 读取业务配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadOnlineConfig</span><span class="params">()</span></span> (cfg *configs.Config) &#123;</span><br><span class="line"></span><br><span class="line">	cfg = &amp;configs.Config&#123;&#125;</span><br><span class="line"></span><br><span class="line">	v := viper.New()</span><br><span class="line"></span><br><span class="line">	v.SetConfigFile(<span class="string">&quot;config.yaml&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := v.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[readOnlineConfig] ReadInConfig err = %v&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := v.Unmarshal(cfg); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		tools.Log.Error(ctx, <span class="string">&quot;[readOnlineConfig] Unmarshal err = %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go微服务组件</category>
      </categories>
  </entry>
  <entry>
    <title>Zap本地日志</title>
    <url>//Go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6/Zap%E6%9C%AC%E5%9C%B0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">level:</span> <span class="number">-1</span> <span class="comment"># debug(-1)、info(0)、warn(1)、error(2)</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">./log/grpc.log</span> <span class="comment"># 日志存放位置</span></span><br><span class="line">  <span class="attr">max-size:</span> <span class="number">1</span> <span class="comment"># 最大1m</span></span><br><span class="line">  <span class="attr">max-backups:</span> <span class="number">5</span> <span class="comment"># 最多5个备份</span></span><br><span class="line">  <span class="attr">max-age:</span> <span class="number">7</span> <span class="comment"># 只保留7天</span></span><br><span class="line">  <span class="attr">compress:</span> <span class="literal">false</span> <span class="comment"># 是否压缩</span></span><br></pre></td></tr></table></figure>

<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GetLog</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetLog</span><span class="params">(cfg *configs.Config)</span></span> *zap.SugaredLogger &#123;</span><br><span class="line"></span><br><span class="line">	writeSyncer := getLogWriter(cfg)</span><br><span class="line"></span><br><span class="line">	encoder := getEncoder()</span><br><span class="line"></span><br><span class="line">	core := zapcore.NewCore(encoder, writeSyncer, zapcore.Level(cfg.Log.Level))</span><br><span class="line"></span><br><span class="line">	logger := zap.New(core, zap.AddCaller())</span><br><span class="line"></span><br><span class="line">	<span class="comment">// defer logger.Sync() // flushes buffer, if any</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> logger.Sugar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getEncoder 编码器(如何写入日志)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span></span> zapcore.Encoder &#123;</span><br><span class="line"></span><br><span class="line">	encoderConfig := zap.NewProductionEncoderConfig()</span><br><span class="line"></span><br><span class="line">	encoderConfig.EncodeTime = zapcore.TimeEncoderOfLayout(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>) <span class="comment">// 转义时间戳</span></span><br><span class="line"></span><br><span class="line">	encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder <span class="comment">// 大写字母表示</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> zapcore.NewConsoleEncoder(encoderConfig)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getLogWriter 日志分割(大小等信息)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLogWriter</span><span class="params">(cfg *configs.Config)</span></span> zapcore.WriteSyncer &#123;</span><br><span class="line"></span><br><span class="line">	lumberJackLogger := &amp;lumberjack.Logger&#123;</span><br><span class="line">		Filename:   cfg.Log.Filename,</span><br><span class="line">		MaxSize:    cfg.Log.MaxSize,    <span class="comment">// 最大xM</span></span><br><span class="line">		MaxBackups: cfg.Log.MaxBackups, <span class="comment">// 最多x个备份</span></span><br><span class="line">		MaxAge:     cfg.Log.MaxAge,     <span class="comment">// 保存x天</span></span><br><span class="line">		Compress:   cfg.Log.Compress,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> zapcore.AddSync(lumberJackLogger)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>全局保存 *zap.SugaredLogger，后使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">log.Infof(<span class="string">&quot;%v&quot;</span>,data)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go微服务组件</category>
      </categories>
  </entry>
  <entry>
    <title>十六种时态</title>
    <url>//English/%E5%8D%81%E5%85%AD%E7%A7%8D%E6%97%B6%E6%80%81/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">一般</th>
<th align="left">完成</th>
<th align="left">进行</th>
<th align="left">完成进行</th>
</tr>
</thead>
<tbody><tr>
<td align="left">现在</td>
<td align="left">一般现在时 <br> do</td>
<td align="left">现在完成时 <br> have done</td>
<td align="left">现在进行时 <br> is doing</td>
<td align="left">现在完成进行时 <br> have been doing</td>
</tr>
<tr>
<td align="left">过去</td>
<td align="left">一般过去时 <br> did</td>
<td align="left">过去完成时 <br> had done</td>
<td align="left">过去进行时 <br> was doing</td>
<td align="left">过去完成进行时 <br> had been doing</td>
</tr>
<tr>
<td align="left">将来</td>
<td align="left">一般将来时 <br> will do</td>
<td align="left">将来完成时 <br> will have done</td>
<td align="left">将来进行时 <br> will be doing</td>
<td align="left">将来完成进行时 <br> will have been doing</td>
</tr>
<tr>
<td align="left">过去将来</td>
<td align="left">一般过去将来时 <br> would do</td>
<td align="left">过去将来完成时 <br> would have done</td>
<td align="left">过去将来进行时 <br> would be doing</td>
<td align="left">过去将来完成进行时 <br> would have been doing</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="一般现在时-do-x2F-does-is-x2F-am-x2F-are"><a href="#一般现在时-do-x2F-does-is-x2F-am-x2F-are" class="headerlink" title="一般现在时 (do&#x2F;does; is&#x2F;am&#x2F;are)"></a>一般现在时 (do&#x2F;does; is&#x2F;am&#x2F;are)</h2><ul>
<li><p>表示现在的情况、状态和特征</p>
<ul>
<li>例：He is a student.</li>
<li>他是一个学生。</li>
</ul>
</li>
<li><p>表示经常性、习惯性动作。</p>
<ul>
<li>例：He always helps others.</li>
<li>他总是帮助别人。</li>
</ul>
</li>
<li><p>客观事实和普遍真理。</p>
<ul>
<li>例：The earth moves the sun.</li>
<li>地球绕着太阳转。</li>
</ul>
</li>
<li><p>表示一个按规定、计划或安排要发生的动作。（常用于列车、客车、飞机或轮船时刻表）</p>
<ul>
<li>例：The next train leaves at 3 o’clock this afternoon.</li>
<li>下一趟火车今天下午3点开车。</li>
</ul>
</li>
<li><p>主将从现：在时间、条件和让步状语从句中经常用一般现在表示将的来事情。</p>
<ul>
<li>例：If it rains tomorrow, we will stay at home.</li>
<li>如果明天下雨，我们会待在家里。</li>
</ul>
</li>
</ul>
<h2 id="现在进行时-am-x2F-is-x2F-are-doing"><a href="#现在进行时-am-x2F-is-x2F-are-doing" class="headerlink" title="现在进行时 (am&#x2F;is&#x2F;are doing)"></a>现在进行时 (am&#x2F;is&#x2F;are doing)</h2><ul>
<li><p>表示此时此刻正在发生的事情。</p>
<ul>
<li>例：He is listning to the music now.</li>
<li>他现在正在听音乐。</li>
</ul>
</li>
<li><p>表示目前一段时间内一直在做的事情，但不一定此时此刻正在做。</p>
<ul>
<li>例：I am studying computer this term.</li>
<li>这个学期我一直在学习计算机。</li>
</ul>
</li>
<li><p>现在进行时可以表示将来的含义。</p>
<ul>
<li><p>瞬时动词的进行一定表将来。</p>
</li>
<li><p>例：I am leaving.</p>
</li>
<li><p>我要离开了。</p>
</li>
<li><p>持续动词的进行只有有将来的时间状语或有将来语境中才表将来。</p>
</li>
<li><p>例：I am travelling next month.</p>
</li>
<li><p>下个月我要去旅行。</p>
</li>
</ul>
</li>
<li><p>现在进行时与频度副词连用，表示说话者或褒义或贬义的感情色彩。</p>
<ul>
<li>例：He is always helping others.</li>
<li>他总是帮助别人。（褒义）</li>
</ul>
</li>
</ul>
<h2 id="过去进行时-was-x2F-were-doing"><a href="#过去进行时-was-x2F-were-doing" class="headerlink" title="过去进行时 (was&#x2F; were doing)"></a>过去进行时 (was&#x2F; were doing)</h2><ul>
<li><p>表示在过去一个具体的时间正在发生的动作。</p>
<ul>
<li>例：Mary was listening to light music 10 minutes ago.</li>
<li>10分钟前，玛丽正在听轻音乐。</li>
</ul>
</li>
<li><p>表示过去某个时间段内一直在发生的事情。</p>
<ul>
<li>例：I was travelling in London last summer vacation.</li>
<li>去年暑假我在伦敦旅行。</li>
</ul>
</li>
<li><p>过去进行时可以表示过去将来的含义。</p>
<ul>
<li><p>瞬时动词的过去进行时一定表示过去将来的含义。</p>
</li>
<li><p>例：Then she said she was leaving.</p>
</li>
<li><p>然后她说她要离开了。</p>
</li>
<li><p>持续动词的过去进行时只有在有过去将来的时间状语或过去将来的语境下才能表示过去将来。</p>
</li>
<li><p>例：She said that she was travelling the next day.</p>
</li>
<li><p>她说她第二天要去旅行。</p>
</li>
</ul>
</li>
<li><p>过去进行时和频度副词连用可以表示说话者或褒义或贬义的感情色彩。</p>
<ul>
<li>例：When he lived in country，he was always helping the poor.</li>
<li>住在乡下时，他总是帮助穷人</li>
</ul>
</li>
</ul>
<h2 id="一般将来时"><a href="#一般将来时" class="headerlink" title="一般将来时"></a>一般将来时</h2><ul>
<li><p>基本结构是will do。</p>
<ul>
<li>例：We will send her a glass hand-made craft as her birthday gift.</li>
<li>我们将送给她一个玻璃的手工制品，作为给她的生日礼物。</li>
</ul>
</li>
<li><p>表示“打算…，要…”时，可用 am&#x2F;is&#x2F;are going to do。</p>
<ul>
<li>例：This is just what I am going to say.</li>
<li>这正是我想说的。</li>
</ul>
</li>
<li><p>表示“即将、正要”时，可用am&#x2F;is&#x2F;are about to do。强调近期内或马上要做的事。</p>
<ul>
<li>例：Don’t worry, I am about to make a close examination on you.</li>
<li>别担心，我马上就给你做一次仔细的检查。</li>
</ul>
</li>
<li><p>“be to do”的2种用法：</p>
<ul>
<li>a) 表示“按计划、安排即将发生某事或打算做某事”。</li>
<li>例：She is to be seen in the lab on Monday.</li>
<li>星期一你准会在实验室见到她。</li>
<li>b) 该做或不该做的事情（语气上接近于should, must, ought to, have to），表示一种命令、规劝性语气。</li>
<li>例：You are to go to bed and keep quiet, kids. Our guests are arriving in less than 5 minutes.</li>
<li>孩子们，你们必须 上床睡觉，不准吵闹。我们的客人5分钟之内就要到了。</li>
</ul>
</li>
</ul>
<h2 id="将来进行时-will-be-doing"><a href="#将来进行时-will-be-doing" class="headerlink" title="将来进行时 (will be doing)"></a>将来进行时 (will be doing)</h2><ul>
<li>强调在将来的某个具体时间正在发生的动作或存在的状态。<ul>
<li>例：Don’t worry, you won’t miss her. She will be wearing a red T-shirt and a white skirt at that time.</li>
<li>别担心，你不会认不出她的。她到时会穿一件红色的T恤衫和一条白色的短裙。</li>
</ul>
</li>
</ul>
<h2 id="过去将来时-would-do"><a href="#过去将来时-would-do" class="headerlink" title="过去将来时 (would do)"></a>过去将来时 (would do)</h2><ul>
<li>表示从过去的某个时间看将要发生的事。<ul>
<li>例：I said on Thursday I should see my friend the next day.</li>
<li>我星期四说我将于第二天拜访我的朋友。</li>
</ul>
</li>
</ul>
<h2 id="过去将来进行时-would-be-doing"><a href="#过去将来进行时-would-be-doing" class="headerlink" title="过去将来进行时 (would be doing)"></a>过去将来进行时 (would be doing)</h2><ul>
<li>强调在过去将来的某个具体时间正在发生的动作或存在的状态。<ul>
<li>例：The government promised that a new highway would be being built next July.</li>
<li>政府承诺说第二年7月将有一条新的高速公路正在修建。</li>
</ul>
</li>
</ul>
<h2 id="一般过去时-did-was-x2F-were"><a href="#一般过去时-did-was-x2F-were" class="headerlink" title="一般过去时 (did; was&#x2F;were)"></a>一般过去时 (did; was&#x2F;were)</h2><ul>
<li><p>表示过去某个时间发生的动作或情况。</p>
<ul>
<li>例：I bought some fruits yesterday.</li>
<li>我昨天买了一些水果。</li>
</ul>
</li>
<li><p>表示过去习惯性动作。</p>
<ul>
<li>would&#x2F; used to do：过去常常……</li>
<li>例：The old man would sit on a bench in the quiet park and look at others for hours without doing anything or talking to anybody.</li>
<li>老人过去常常坐在宁静的公园里的一条长椅上，看着其他的人，一坐就是数个小时，什么也不干，也不和任何人交谈。</li>
<li>He used to visit his mother once a week.</li>
<li>他以前总是每周看望一次他的母亲。</li>
</ul>
</li>
</ul>
<h2 id="现在完成时-have-x2F-has-done"><a href="#现在完成时-have-x2F-has-done" class="headerlink" title="现在完成时 (have&#x2F;has done)"></a>现在完成时 (have&#x2F;has done)</h2><ul>
<li><p>表示动作到现在为止已经完成或刚刚完成，强调对现在产生的影响。</p>
<ul>
<li>例：I bought a new house, but I haven’t sold my old one yet, so at the moment I have two houses.</li>
<li>我买了一所新房子，但是还没有卖掉旧的，所以现在我又两所房子。</li>
</ul>
</li>
<li><p>表示从过去某时刻开始，持续到现在的动作或情况，并且有可能会继续延续下去。此时经常用延续性动词。</p>
<ul>
<li>时间状语常用since加一个过去的时间点，或for加一段时间，或by加一个现在时间。</li>
<li>例：Great as Newton was, many of his ideas have been challenged today and are being modified by the work of scientists of our time.</li>
<li>虽然牛顿是个伟大的人物，但他的许多见解直到今天还在受到挑战，并且被现代科学家的工作所修正。</li>
</ul>
</li>
</ul>
<h2 id="现在完成进行时-have-x2F-has-been-doing"><a href="#现在完成进行时-have-x2F-has-been-doing" class="headerlink" title="现在完成进行时 (have&#x2F;has been doing)"></a>现在完成进行时 (have&#x2F;has been doing)</h2><ul>
<li>表示某一动作开始于过去某一时间，延续或重复地出现至今，或将继续延续至将来。<ul>
<li>例：We have been working on this project for over a month now.</li>
<li>到目前为止，我们一直在处理那个项目，已经花了一个多月时间了。</li>
</ul>
</li>
</ul>
<h2 id="过去完成时-had-done"><a href="#过去完成时-had-done" class="headerlink" title="过去完成时 (had done)"></a>过去完成时 (had done)</h2><ul>
<li><p>表示在过去的某个时间或动作以前已经完成的动作或已经存在的状态。就是我们常说的”过去的过去”。</p>
<ul>
<li>Until then, his family hadn’t heard from him for six months.</li>
<li>到那时为止，他家里已经有六个月没得到他的消息了。</li>
</ul>
</li>
<li><p>表示从过去的过去开始，持续到过去的动作或情况，并且有可能会继续延续下去。此时经常用延续性动词。</p>
<ul>
<li>By the time I left the school, he had taught the class for 3 years.</li>
<li>到我毕业时,他已经教那个班三年了.</li>
</ul>
</li>
</ul>
<h2 id="过去完成进行时-had-been-doing"><a href="#过去完成进行时-had-been-doing" class="headerlink" title="过去完成进行时 (had been doing)"></a>过去完成进行时 (had been doing)</h2><ul>
<li>表示从过去的过去开始，持续到过去的动作或情况，期间一直有规律的在进行、不曾间断，并且有可能会继续延续下去。此时经常用延续性动词。<ul>
<li>例：The old clock had been being taken apart of and fixed up again for several times by my 10-year old son before I came back home.</li>
<li>我回到家之前，我10岁大的儿子已经把这个旧钟表拆卸并重新组装了好几回了。</li>
</ul>
</li>
</ul>
<h2 id="过去将来完成时-would-have-done"><a href="#过去将来完成时-would-have-done" class="headerlink" title="过去将来完成时 (would have done)"></a>过去将来完成时 (would have done)</h2><ul>
<li><p>表示到过去将来某一时间已经完成的动作，并且对过去将来那一时间点产生影响。</p>
<ul>
<li>例：I believed by the end of that year an advanced version of that software would have been developed, but I was wrong.</li>
<li>我坚信到那年年底为止，那个软件的新版本将被开发出来。但是我错了。</li>
</ul>
</li>
<li><p>表示动作从过去某一时间开始一直延续到过去将来某一时间，并且有可能继续延续下去。</p>
<ul>
<li>例：He told me that by the end of the year he would have lived there for thirty years.</li>
<li>他告诉我，到那年年底为止他将已经在那里住了三十年了。</li>
</ul>
</li>
</ul>
<h2 id="过去将来完成进行时-would-have-been-doing"><a href="#过去将来完成进行时-would-have-been-doing" class="headerlink" title="过去将来完成进行时 (would have been doing)"></a>过去将来完成进行时 (would have been doing)</h2><ul>
<li>表示动作从过去某一时间开始一直延续到过去将来某一时间，期间一直有规律在进行、不曾间断，并且有可能继续延续下去。<ul>
<li>例：They said that by the end of the following month, the project would have been being worked for 3 years.</li>
<li>他们说到第二个月底为止，这项工程就已经不停地进行了3年了。</li>
</ul>
</li>
</ul>
<h2 id="将来完成时-will-have-done"><a href="#将来完成时-will-have-done" class="headerlink" title="将来完成时 (will have done)"></a>将来完成时 (will have done)</h2><ul>
<li><p>表示一个动作到将来某个时间为止已经完成，强调对将来那个时间产生的影响。</p>
<ul>
<li>例：Pick me up at 8 o’clock,I will have had breakfast by then.</li>
<li>早上8点钟你来接我,到时我已经吃完早饭了.</li>
</ul>
</li>
<li><p>表示一个动作延续到将来某个时间，并且有可能继续延续下去。</p>
<ul>
<li>例：The conference will have lasted a full week by the time it ends.</li>
<li>会议从开始到结束将持续整整一个星期。</li>
</ul>
</li>
</ul>
<h2 id="将来完成进行时-will-have-been-doing"><a href="#将来完成进行时-will-have-been-doing" class="headerlink" title="将来完成进行时 (will have been doing)"></a>将来完成进行时 (will have been doing)</h2><ul>
<li>表示将来某个时间点之前正在进行的动作或状态。<ul>
<li>By this time next year, I will have been studying English for five years.</li>
<li>到明年这个时候，我将已经学习英语五年了。</li>
<li>They will have been living in that house for ten years by the end of this month.</li>
<li>到本月底，他们将已经在那个房子里住了十年。</li>
<li>In two hours, she will have been waiting for the bus for over an hour.</li>
<li>两个小时后，她将已经等待公交车超过一个小时了。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>English</category>
      </categories>
  </entry>
</search>
